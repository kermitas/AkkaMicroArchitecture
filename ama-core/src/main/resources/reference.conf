# AkkaMicroArchitecture configuration.
ama {

  # =============================

  # Indicates if configuration should be printed to System.out at the beginning.
  renderConfiguration = false

  # =============================

  # Indicated if messages published on broadcaster will be logged (with debug level).
  logMessagesPublishedOnBroadcaster = false

  # =============================

  # Those actors will be initialized at startup, each one should have constructor and PostInit message will be send to each,
  # check how it look like in as.ama.sample.Sample actor.
  #
  # Those actors will be created as root actors (as children of root guardian).
  #
  # Because Typesafe Config library produces unpredicted order you can use initializationOrder.
  # Lowest value will be initialized first, if not present default value 1000 will be used.
  initializeOnStartup {

    # if initializationTimeoutInMs (in automatically initialized actor section) is not defined or less-or-equal 0 then this value will be used
    defaultSingleActorInitializationTimeoutInMs = 5000

    # Points to a class that has mixed in as.ama.AmaConfigBuilder trait.
    # Main idea behind this class is to allow end user of Ama to prepare individual AmaConfig that will be passed to automatically created actors.
    # If not defined then as.ama.startup.DefaultAmaConfigBuilder will be used.
    amaConfigBuilderClassName = "as.ama.startup.DefaultAmaConfigBuilder"

    # You can append this list by using "actors = ${ama.initializeOnStartup.actors} [ ... ]" in your application.conf
    # or you can overwrite it by "actors = [ ... ]"
    actors = [
      {
        class = "as.ama.addon.lifecycle.LifecycleManager"

        # if not present then default value of 1000 will be used
        initializationOrder = 100

        # if not defined or less-or-equal 0 then defaultSingleActorInitializationTimeoutInMs will be used
        initializationTimeoutInMs = 5000

        config = {

          # If greater than 0 will wait to process all messages on Akka event bus (for example: log messages) and then perform shutdown.
          onShutdownWaitForEventBusMessagesToBeProcessedInMs = 500

          automaticallyShutdownJVMAfterTimeInMs = 3000
          automaticallyKillJVMAfterShutdownTryTimeInMs = 1000 // this means 'time in milliseconds after automaticallyShutdownJVMAfterTimeInMs'
        }
      },
      {
        class = "as.ama.addon.inputstream.InstallInputStreamListener"

        initializationOrder = 500

        config = {
          checkIfKeyWasPressedTimeIntervalInMs = 500
        }
      },
      {
        class = "as.ama.addon.InstallJVMShutdownHook"

        initializationOrder = 500

        config = {
          keepHookForTimeInMs = 1000
        }
      }
    ]
  }

  # =============================

  commandLine {

    # If true will overwrite arguments passed via command line with arguments below.
    overrideOriginallyPassedArguments = false

    arguments = " Alice has a  cat  "
  }

  # =============================

  # Akka related configuration (but not Akka native configuration, this should be located under 'akka' key located at root).
  akka {
    actorSystemName = "ama"
  }

  # =============================
}

# Akka configuration in your application.conf can be placed here.
#akka {
#
# ...here Akka configuration...
#
#}
